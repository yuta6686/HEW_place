======================================================================
使用方法
======================================================================

使用方法は、conioex.h をプロジェクト フォルダにコピーし、

#include <conio.h>

の代わりに、

#include "conioex.h"

とするだけです。
　BCC とは多少の動作の違いがありますし、サポートしていない関数も多数
ありますが、逆に追加されている関数もあり、それらは BCC でも同様の手順
で使用可能です。


　分割コンパイルを利用して、複数のソースで使用する場合、main 関数を含
むソース ファイル“以外”については、必ず、

#define CONIOEX
#include "conioex.h"

と、マクロ定義の後、インクルードするようにしてください。

----------------------------------------------------------------------
closesound
----------------------------------------------------------------------
プロトタイプ

void closesound(int hsound);

説明

音ファイルを閉じます。

opensound によりオープンされた音声／音楽ファイルをクローズします。
hsound には opensound の戻り値であるサウンド ハンドルを指定します。

opensound によりオープンされた音声／音楽ファイルは、必ず closesound に
より閉じなければなりません。

----------------------------------------------------------------------
clreol
----------------------------------------------------------------------
プロトタイプ

void clreol(void);

説明

行末までをクリアします。

clreol は、現在のカーソル位置から行末までのすべての文字をクリアします。
カーソルは移動しません。

----------------------------------------------------------------------
clrscr
----------------------------------------------------------------------
プロトタイプ

void clrscr(void);

説明

画面をクリアします。

clrscr は、現在の画面をクリアし、カーソルを左上隅 (1, 1) に置きます。

----------------------------------------------------------------------
delline
----------------------------------------------------------------------
プロトタイプ

void delline(void);

説明

行を削除します。

delline は、カーソルがある行を削除し、それ以降のすべての行を 1 行上に
移動します。

----------------------------------------------------------------------
getcaption
----------------------------------------------------------------------
プロトタイプ

int getcaption(char *title, int len);

説明

タイトル バー文字列を取得します。

コンソール ウィンドウのタイトル バー文字列を取得します。title は、文字
列を受け取るバッファを指すポインタです。len には、title パラメータが指
すバッファの長さ（終端の NUL 文字分も含む）を指定します。
取得に失敗した場合は 0 を、成功した場合は取得した文字列の長さを返しま
す。

戻り値

タイトル バー文字列の長さ（NUL 文字を含まない）を返します。

----------------------------------------------------------------------
gotoxy
----------------------------------------------------------------------
プロトタイプ

void gotoxy(int x, int y);

説明

カーソルの位置を設定します。

gotoxy は、カーソルを指定された位置に移動します。いずれかの座標が無効
な場合、gotoxy の呼び出しは無視されます。gotoxy のどちらの引数にも 0
は指定できません。

任意の場所にカーソルを表示できる

----------------------------------------------------------------------
highvideo
----------------------------------------------------------------------
プロトタイプ

void highvideo(void);

説明

高輝度文字色を設定します。

highvideo は、現在設定されている前景色に高輝度ビットをセットすることで、
文字色を高輝度にします。
この関数は、現在画面上にある文字には影響しません。highvideo を呼び出し
た後で、コンソール出力を実行する関数（cprintf など）によって表示される
文字に影響します。

----------------------------------------------------------------------
inport
----------------------------------------------------------------------
プロトタイプ

int inport(int port);

説明

入力ポートから現在の値を取得します。

inport は、ジョイスティック（ゲームパッド）、キーボード、マウスの現在の
状態を直接読み取り、その値を返します。port には、 conioex.h で定義され
ているシンボル定数の形で、入力ポート（デバイス）を指定します。

シンボルについては、巻末のポート番号一覧を参照してください。

キーボード (PK_*) およびマウスボタン (PM_LEFT, PM_MID, PM_RIGHT) の場合、
戻り値は 0 (押されていない) か、0 以外 (押されている) となります。ジョ
イスティックのボタン (PJ?_BTN) は、ビット 0 〜 3 の値が、ボタン 1 〜 4
の状態を表します (1 で押されている) 。マウスカーソル座標 (PM_CUR?) を
指定した場合は、それぞれ対応する文字位置 (1 〜) を返します。

メモ

この関数を使用中、キーが押されたままの状態で、コンソール入力 (getch, 
cscanf, cgets 等) や、ストリーム入力 (getchar, scanf, gets 等) が実行
された場合、その後の入力に支障を来たすことがあります。この関数を使用す
る時は、リアルタイムキー入力が必要な場合に限定してください。

この関数は、標準入力がリダイレクトされた状態 (VisualStudio や CPad for
Borland C++ 等から実行した場合など) では、ジョイスティックを除き、常に
0 を返します。ジョイスティックが非接続でポート番号に PJ?_* を指定した
時は -1 を返します。

戻り値

入力ポート毎の現在値を返します。

ループの中で呼ぶことでアニメーションしながら
動かすことができる
ネームバトラーの次の課題で使う
キー入力と一緒に使うと厳しい
使い方にコツが居る

----------------------------------------------------------------------
reinport
----------------------------------------------------------------------
プロトタイプ

void reinport(void);

説明

inport関数を呼んだあとにscanfなどの入力受付を行うと
inportが正しく結果を返さなくなりますので、そういうときinport関数を
使う前に一度使ってください。


----------------------------------------------------------------------
insline
----------------------------------------------------------------------
プロトタイプ

void insline(void);

説明

空白行を挿入します。

insline は、現在のテキスト背景色を使用して、カーソル位置に空白行を挿入
します。空白行より下の行は 1 行ずつ下に移動し、下端の行は直前の行に
上書きされます。

----------------------------------------------------------------------
lowvideo
----------------------------------------------------------------------
プロトタイプ

void lowvideo(void);

説明

低輝度文字色を設定します。

lowvideo は、現在設定されている前景色の高輝度ビットをクリアすることで、
文字色を低輝度にします。
この関数は、現在画面上にある文字には影響しません。この関数を呼び出した
後で、コンソール出力を実行する関数によって表示される文字に影響します。

----------------------------------------------------------------------
msleep
----------------------------------------------------------------------
プロトタイプ

void msleep(unsigned long msecs);

説明

現在のスレッドの実行を中断します。

msleep は、現在のスレッドの実行を、指定された間隔だけ中断します。msecs
には、実行を中断する時間をミリ秒単位で指定します。0 を指定した場合、ス
レッドは、実行準備ができている同じ優先順位のほかのスレッドにタイム ス
ライスの残りを譲ります。実行準備ができている同じ優先順位のスレッドがな
ければ、関数はすぐに戻り、スレッドは実行を続けます。

----------------------------------------------------------------------
normvideo
----------------------------------------------------------------------
プロトタイプ

void normvideo(void);

説明

標準輝度の文字色を設定します。

normvideo は、テキスト属性（前景色と背景色）をプログラム起動時の値に
戻すことで、標準輝度の文字色に設定します。
この関数は、現在画面上にある文字には影響しません。normvideo を呼び出し
た後で、コンソール出力を実行する関数（cprintf など）によって表示される
文字に影響します。

----------------------------------------------------------------------
opensound
----------------------------------------------------------------------
プロトタイプ

int opensound(char *soundfile);

説明

音ファイルを開きます。

音声／音楽データファイルをオープンし、再生可能にします。対応ファイル形
式は、PCM (.wav) 、MIDI (.mid) 、MP3 (.mp3) の三種です。正常にオープン
できた時は、その後の再生操作に用いる 0 以外の値（サウンド ハンドル）を
返します。ファイルが見つからなかったり、対応できない形式等、オープンで
きなかった場合、0 を返します。

戻り値

再生する音を識別するサウンド ハンドルを返します。

----------------------------------------------------------------------
playsound
----------------------------------------------------------------------
プロトタイプ

void playsound(int hsound, int repeat);

説明

音ファイルを再生します。

opensound によりオープンされた音声／音楽ファイルを再生します。hsound
には opensound の戻り値であるサウンド ハンドルを、repeat にはループ再
生の有無（1 でループ再生、0 で一度だけ再生）を指定します。

repeat で 1 を指定した場合、定期的に updatesound を呼び出す必要があり
ます。但し、MP3 形式だけは updatesound を呼び出す必要はありません。

----------------------------------------------------------------------
setcaption
----------------------------------------------------------------------
プロトタイプ 

void setcaption(char *title);

説明

タイトル バー文字列を設定します。

コンソール ウィンドウのタイトル バー文字列を設定します。title には、タ
イトル バーに表示させる NUL で終わる文字列を指すポインタを指定します。

----------------------------------------------------------------------
setcursortype
----------------------------------------------------------------------
プロトタイプ 

void setcursortype(int cur_t);

説明

カーソルの外観を設定します。

カーソルの種類を次のいずれかに設定します。

NOCURSOR	カーソル非表示
NORMALCURSOR	通常の下線カーソル
SOLIDCURSOR	ブロック カーソル

----------------------------------------------------------------------
setvolume
----------------------------------------------------------------------
プロトタイプ

void setvolume(int hsound, int percent);

説明

再生音量を設定します。

hsound で指定される形式を再生するデバイスに対し、percent で指定される
再生音量を設定します。hsound には opensound の戻り値であるサウンド ハ
ンドルを指定します。percent には音量を 0 〜 100 の範囲で指定します。

再生デバイスに対する設定となるため、同時にオープンしている同一形式の音
ファイルが全て影響を受けることに留意してください。

----------------------------------------------------------------------
stopsound
----------------------------------------------------------------------
プロトタイプ

void stopsound(int hsound);

説明

音ファイル再生を停止します。

再生中の音声／音楽ファイルを再生停止します。hsound には opensound の戻
り値を指定します。

----------------------------------------------------------------------
textattr
----------------------------------------------------------------------
プロトタイプ

void textattr(int newattr);

説明

テキスト属性を設定します。

textattr を使用すると、1 回の呼び出しで前景色と背景色の両方を設定でき
ます。通常、これら属性は textcolor と textbackground を使って設定され
ます。
この関数は、現在画面上にある文字には影響しません。この関数を呼び出した
後で、コンソール出力を実行する関数（cprintf など）によって表示される
文字に影響します。
色情報は、newattr パラメータで次のようにエンコードされます。

ビット 0 〜 3 には 4 ビットの前景色（0 〜 15）が含まれます。
ビット 4 〜 7 には 4 ビットの背景色（0 〜 15）が含まれます。

textattr のテキスト属性を作成するときに conioex.h で定義されているシン
ボル色定数を使用する場合は、背景色として選択する色に関して、選択した
背景色を 4 ビット左にシフトして、正しいビット位置に移動する必要があり
ます。
色定数については、textcolor を参照してください。

----------------------------------------------------------------------
textbackground
----------------------------------------------------------------------
プロトタイプ

void textbackground(int newcolor);

説明

新しいテキスト背景色を選択します。

textbackground は、背景色を選択します。この関数は、テキストモードの出力
を直接画面に生成する関数に対して機能します。newcolor は、新しい背景色を
選択します。newcolor は、0 〜 7 の整数、または conioex.h で定義されて
いるシンボル定数のいずれかに設定できます。
textbackground を呼び出すと、それ以降のコンソール出力を使用する関数
（cprintf など）では、新しい色が使用されます。textbackground は、現在
画面上にある文字には影響しません。
次の表に、使用できる色のシンボル定数と数値を示します。

BLACK（黒）		0
BLUE（青）		1
GREEN（緑）		2
CYAN（シアン）		3
RED（赤）		4
MAGENTA（マゼンタ）	5
BROWN（茶）		6
LIGHTGRAY（明るい灰色）	7

高輝度の背景色 (8 〜 15) は指定できない（無視される）ため、高輝度の背景
色を使用したい場合は、textattr を使用する必要があります。

----------------------------------------------------------------------
textcolor
----------------------------------------------------------------------
プロトタイプ

void textcolor(int newcolor);

説明

テキストモードの新しい文字色を選択します。

textcolor は、文字の前景色を選択します。この関数は、コンソール出力関数
に対して機能します。newcolor は、新しい前景色を選択します。newcolor は、
次の表で指定されている整数、または conioex.h で定義されているシンボル
定数のいずれかに設定できます。

textcolor を呼び出すと、それ以降のコンソール出力を使用する関数（cprintf
など）では、新しい色が使用されます。textcolor は、現在画面上にある文字
には影響しません。

次の表に、使用できる色のシンボル定数と数値を示します。

BLACK（黒）			 0
BLUE（青）			 1
GREEN（緑）			 2
CYAN（シアン）			 3
RED（赤）			 4
MAGENTA（マゼンタ）		 5
BROWN（茶）			 6
LIGHTGRAY（明るい灰色）		 7
DARKGRAY（暗い灰色）		 8
LIGHTBLUE（明るい青）		 9
LIGHTGREEN（明るい緑）		10
LIGHTCYAN（明るいシアン）	11
LIGHTRED（明るい赤）		12
LIGHTMAGENTA（明るいマゼンタ）	13
YELLOW（黄）			14
WHITE（白）			15

----------------------------------------------------------------------
updatesound
----------------------------------------------------------------------
プロトタイプ

void updatesound(int hsound);

説明

音ファイルのループ再生判定を行います。

hsound で指定される音声／音楽ファイルが再生中かどうか判定し、ループ再
生が指定されていて、再生が終了した場合は、再度先頭から再生します。MP3
形式の場合は無視されます。

----------------------------------------------------------------------
wherex
----------------------------------------------------------------------
プロトタイプ 

int wherex(void);

説明

水平方向のカーソル位置を取得します。

wherex は、現在のカーソル位置の x 座標を返します。

戻り値

wherex は、1 〜 80 の範囲の整数を返します。

----------------------------------------------------------------------
wherey
----------------------------------------------------------------------
プロトタイプ

int wherey(void);

説明

垂直方向のカーソル位置を取得します。

wherey は、現在のカーソル位置の y 座標を返します。

戻り値

wherey は、1 〜 25 の範囲の整数を返します。

======================================================================
※ ポート番号一覧
======================================================================

ポート番号		ジョイスティック	戻り値
----------------------------------------------------------------------
PJ1_XPOS (PJ_XPOS)	1P X軸			0〜65535
PJ1_YPOS (PJ_YPOS)	1P Y軸			0〜65535
PJ1_ZPOS (PJ_ZPOS)	1P Z軸			0〜65535
PJ1_BTNS (PJ_BTNS)	1P ボタン状態		0〜15 (ビット 0〜3 が
						ボタン 1〜4 に対応)
PJ2_XPOS		2P X軸			0〜65535
PJ2_YPOS		2P Y軸			0〜65535
PJ2_ZPOS		2P Z軸			0〜65535
PJ2_BTNS		2P ボタン状態		0〜15
PJ3_XPOS		3P X軸			0〜65535
PJ3_YPOS		3P Y軸			0〜65535
PJ3_ZPOS		3P Z軸			0〜65535
PJ3_BTNS		3P ボタン状態		0〜15
PJ4_XPOS		4P X軸			0〜65535
PJ4_YPOS		4P Y軸			0〜65535
PJ4_ZPOS		4P Z軸			0〜65535
PJ4_BTNS		4P ボタン状態		0〜15


ポート番号		キーボード		戻り値
----------------------------------------------------------------------
PK_ESC			[Esc]			押されていたら0以外
PK_ENTER		[Enter]			押されていたら0以外
PK_F1 〜 PK_F12		[F1] 〜 [F12]		押されていたら0以外
PK_0 〜 PK_9		[0] 〜 [9]		押されていたら0以外
PK_UP			[↑]			押されていたら0以外
PK_DOWN			[↓]			押されていたら0以外
PK_LEFT			[←]			押されていたら0以外
PK_RIGHT		[→]			押されていたら0以外
PK_SHIFT		[Shift]			押されていたら0以外
PK_CTRL			[Ctrl]			押されていたら0以外
PK_SP			(空白)			押されていたら0以外
PK_A 〜 PK_Z		[A] 〜 [Z]		押されていたら0以外
PK_TAB			[Tab]			押されていたら0以外
PK_ALT			[Alt]			押されていたら0以外


ポート番号		マウス			戻り値
----------------------------------------------------------------------
PM_LEFT			左ボタン		押されていたら0以外
PM_MID			中央ボタン		押されていたら0以外
PM_RIGHT		右ボタン		押されていたら0以外
PM_CURX			カーソルX座標		1〜80 (未接続時は0)
PM_CURY			カーソルY座標		1〜25 (未接続時は0)

======================================================================
